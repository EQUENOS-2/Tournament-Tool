import discord
from discord.ext import commands
import asyncio
import os, json
from pymongo import MongoClient
from random import randint

#----------------------------------------------+
#                Connections                   |
#----------------------------------------------+
bot_token = str(os.environ.get("bot_token"))
db_token = str(os.environ.get("db_token"))
prefix = ".."

client = commands.Bot(prefix)
client.remove_command("help")
cluster = MongoClient(db_token)
db = cluster["tournament_tool_db"]


#----------------------------------------------+
#                  Variables                   |
#----------------------------------------------+
owner_ids = [
    301295716066787332
]

#----------------------------------------------+
#                  Functions                   |
#----------------------------------------------+
from functions import antiformat as anf
from functions import has_permissions, is_int, carve_int, get_field, find_alias, display_perms, vis_aliases, Server
from custom_converters import IntConverter



def channel_url(channel):
    return f"https://discordapp.com/channels/{channel.guild.id}/{channel.id}"


def from_hex(hex_code):
    return int(hex_code[1:], 16)


def is_guild_moderator():
    def predicate(ctx):
        mod_roles = Server(ctx.guild.id, projection={"mod_roles", True}).mod_roles
        author_role_ids = [r.id for r in ctx.author.roles]
        has = False
        for role_id in mod_roles:
            if role_id in author_role_ids:
                has = True
                break
        if has:
            return True
        else:
            raise IsNotModerator()
    return commands.check(predicate)


def has_instance(_list, _class):
    has = False
    for elem in _list:
        if isinstance(elem, _class):
            has = True
            break
    return has


class IsNotModerator(commands.CheckFailure):
    pass


class Detect:
    def __init__(self, guild):
        self.guild = guild
    
    def member(self, search):
        _id = carve_int(search)
        member = None
        if _id is  not None:
            member = self.guild.get_member(_id)
        if member is None:
            member = self.guild.get_member_named(search)
        return member


class Participant:
    def __init__(self, discord_user):
        if isinstance(discord_user, int):
            self.id = discord_user
        else:
            self.id = discord_user.id
    
    def update_stats(self, points, place):
        collection = db["users"]
        collection.update_one(
            {"_id": self.id},
            {"$push": {"history": {
                "place": place,
                "rating": points
            }}},
            upsert=True
        )
    
    def get_stats(self):
        history = self.get_history()
        pts, trs = 0, 0
        for tournament in history:
            pts += tournament["rating"]
            trs += 1
        return (pts, trs)

    def get_history(self, as_tuples=False):
        collection = db["users"]
        history = get_field(collection.find_one({"_id": self.id}), "history", default=[])
        if as_tuples:
            history = [(t["rating"], t["place"]) for t in history]
        return history

    def rollback(self):
        collection = db["users"]
        history = get_field(collection.find_one_and_update(
            {"_id": self.id},
            {"$pop": {"history": 1}},
            upsert=True
        ), "history", default=[])
        return None if history == [] else history[len(history) - 1]


class Leaderboard:
    def __init__(self, tuple_array, interval=10):
        self.tuples = tuple_array
        self.interval = interval
        self.length = len(self.tuples)
        self.total_pages = (self.length - 1) // self.interval + 1

    def sort_values(self, reverse=True, sort_by=1):
        self.tuples.sort(key=lambda tuple: tuple[sort_by], reverse=reverse)

    def get_page(self, page):
        """
        Partially returns tuple array and index of the left element of this array
        """
        lower_bound = (page - 1) * self.interval
        upper_bound = min(lower_bound + self.interval, self.length)
        return (self.tuples[lower_bound:upper_bound], lower_bound)
    
    def tuple_index(self, tuple_value, compare_by=0):
        out = None
        for i in range(self.length):
            if self.tuples[i][compare_by] == tuple_value:
                out = i
                break
        return out

#----------------------------------------------+
#                    Events                    |
#----------------------------------------------+
@client.event
async def on_ready():
    print(
        f"Bot user: {client.user}\n"
        f"ID: {client.user.id}"
    )

#----------------------------------------------+
#                  Commands                    |
#----------------------------------------------+
@commands.cooldown(1, 1, commands.BucketType.member)
@client.command(aliases=["h"], help="—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ")
async def help(ctx, *, cmd_s=None):
    p = ctx.prefix
    
    if cmd_s is None:
        cog_desc = f"> `{p}commands main`\n"
        for _cog in client.cogs:
            cog_desc += f"> `{p}commands {_cog}`\n"
        reply = discord.Embed(
            title="üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥",
            description=(
                f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{cog_desc}\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ: `{p}help –Ω—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞`"
            ),
            color=discord.Color.blurple()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

    else:
        cmd = None
        for c in client.commands:
            if cmd_s in [c.name, *c.aliases]:
                cmd = c
                break
        
        if cmd is None:
            reply = discord.Embed(
                title="üîé | –ù–µ –Ω–∞—à—ë–ª –∫–æ–º–∞–Ω–¥—É, —É–≤—ã",
                description=f"–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã `{p}{cmd_s}`, –º–æ–∂–µ—Ç, –í—ã –æ—à–∏–±–ª–∏—Å—å?",
                color=discord.Color.blurple()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            description = "`-`"; usage = "`-`"; brief = "`-`"; aliases = "-"
            if cmd.description != "":
                description = cmd.description
            if cmd.usage is not None:
                usage = "\n> ".join( [f"`{p}{cmd} {u}`" for u in cmd.usage.split("\n")] )
            if cmd.brief is not None:
                brief = "\n> ".join( [f"`{p}{cmd} {u}`" for u in cmd.brief.split("\n")] )
            if len(cmd.aliases) > 0:
                aliases = ", ".join(cmd.aliases)
            
            reply = discord.Embed(
                title = f"‚ùì –û–± –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö `{p}{cmd}`",
                description = (
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
                    f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {usage}\n"
                    f"**–ü—Ä–∏–º–µ—Ä—ã:** {brief}\n\n"
                    f"**–°–∏–Ω–æ–Ω–∏–º—ã:** `{aliases}`"
                )
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)

            try:
                ctx.command.reset_cooldown(ctx)
            except Exception:
                pass


@commands.cooldown(1, 1, commands.BucketType.member)
@client.command(name="commands", aliases=["cmds"], help="—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def _commands(ctx, *, section=None):
    p = ctx.prefix
    if section is None:
        cog_desc = f"> `{p}commands main`\n"
        for _cog in client.cogs:
            cog_desc += f"> `{p}commands {_cog}`\n"
            
        reply = discord.Embed(
            title="üìñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥",
            description=(
                f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{cog_desc}\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ: `{p}help –Ω—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞`"
            ),
            color=discord.Color.blurple()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    
    else:
        cog_found = None
        sec = section.lower()
        if "main".startswith(sec):
            cog_found = "main"
            cog_commands = [c for c in client.commands if c.cog is None]
        else:
            for _cog in client.cogs:
                if str(_cog).lower().startswith(sec):
                    cog_found = _cog
                    cog_commands = client.get_cog(_cog).get_commands()
                    break
        
        if cog_found is None:
            reply = discord.Embed(
                title="üîé | –ù–µ –Ω–∞—à—ë–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É–≤—ã",
                description=f"–£ –º–µ–Ω—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{section}`, –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ?",
                color=discord.Color.blurple()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            desc = ""
            for cmd in cog_commands:
                if cmd.help is None:
                    cmdhelp = "[-]"
                else:
                    cmdhelp = cmd.help
                desc += f"`{p}{cmd}` - {cmdhelp}\n"
            reply = discord.Embed(
                title=f"üìÅ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ `{cog_found}`",
                description=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ: `{p}help –Ω—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞`\n\n{desc}",
                color=discord.Color.blurple()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)


@commands.cooldown(1, 1, commands.BucketType.member)
@client.command(help="–¥–∞–∂–µ –Ω–µ –¥—É–º–∞–π")
async def test(ctx, num: IntConverter=None):
    if ctx.author.id not in owner_ids:
        reply = discord.Embed(
            title="‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
            description=(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:\n"
                "> –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ–ª—å–º–µ–Ω–µ—Ñ"
            ),
            color=discord.Color.dark_red()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    else:
        # categ = ctx.guild.get_channel(566638204036448257)
        # role = ctx.guild.get_role(681453567516606490)
        # ovw = categ.overwrites()
        # ovw[role] = discord.PermissionOverwrite(manage_permissions=True)
        # await categ.edit(overwrites=ovw)

        word = "—Ö—É–µ—Å—Ç"
        _word = ""
        for s in word:
            if randint(0, 1):
                _word += s.upper()
            else:
                _word += s
        await ctx.send(_word)


@commands.cooldown(1, 1, commands.BucketType.member)
@commands.check_any(
    commands.has_permissions(administrator=True),
    is_guild_moderator() )
@client.command(
    aliases=["r"],
    help="–∏–∑–º–µ–Ω–∏—Ç—å —á–µ–π-—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥",
    description="–∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–≤",
    brief="–ß–∏—Å–ª–æ –ú–µ—Å—Ç–æ @–£—á–∞—Å—Ç–Ω–∏–∫",
    usage="5 1 @User#1234" )
async def rating(ctx, num: int, place: int, *, member: discord.Member):
    user = Participant(member)
    user.update_stats(num, place)
    reply = discord.Embed(
        title="üìÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description=(
            f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {member}\n"
            f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:** {num} ‚ö°\n"
            f"**–ú–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:** {place} üèÖ"
        ),
        color=from_hex("#ecd994")
    )
    reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
    await ctx.send(embed=reply)


@commands.cooldown(1, 1, commands.BucketType.member)
@commands.check_any(
    commands.has_permissions(administrator=True),
    is_guild_moderator() )
@client.command(
    aliases=["clear-top"],
    help="–æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ø",
    description="–æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
    brief="",
    usage="" )
async def clear_top(ctx):
    Q = discord.Embed(
        title="‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        description="–ù–∞–ø–∏—à–∏—Ç–µ `–¥–∞` –∏–ª–∏ `–Ω–µ—Ç`"  
    )
    Q.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
    await ctx.send(embed=Q)

    yes = ["–¥–∞", "yes", "1"]
    no = ["–Ω–µ—Ç", "no", "0"]
    try:
        msg = await client.wait_for(
            "message",
            check=lambda m: m.author.id == ctx.author.id and m.channel.id == ctx.channel.id and m.content.lower() in [*yes, *no],
            timeout=60
        )
    except asyncio.TimeoutError:
        await ctx.send(f"{ctx.author.mention}, –í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏, —Å–±—Ä–æ—Å —Ç–æ–ø–∞ –æ—Ç–º–µ–Ω—ë–Ω")

    else:
        if msg.content.lower() in yes:
            server = Server(ctx.guild.id)
            server.reset_participants()
            reply = discord.Embed(
                title="üí• –û—á–∏—â–µ–Ω–æ",
                description="–¢–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç. –î–æ —Å–≤—è–∑–∏.",
                color=discord.Color.orange()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        else:
            reply = discord.Embed(
                title="üëå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                description="–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Ü–µ–ª–µ–ª. –°–µ–≥–æ–¥–Ω—è."
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)


@commands.cooldown(1, 1, commands.BucketType.member)
@commands.check_any(
    commands.has_permissions(administrator=True),
    is_guild_moderator() )
@client.command(
    help="–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º",
    description="–æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º",
    brief="@–£—á–∞—Å—Ç–Ω–∏–∫",
    usage="@User#1234" )
async def back(ctx, *, member: discord.Member):
    user = Participant(member)
    result = user.rollback()

    if result is None:
        reply = discord.Embed(
            title="üì¶ –û—à–∏–±–∫–∞",
            description=f"–ü–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å **{member}** –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    
    else:
        pts, place = result["rating"], result["place"]
        reply = discord.Embed(
            title="‚ôª –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã",
            description=(
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏:\n"
                f"> **–£—á–∞—Å—Ç–Ω–∏–∫:** {member}\n"
                f"> **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:** {pts} ‚ö°\n"
                f"> **–ú–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:** {place} üèÖ"
            ),
            color=discord.Color.dark_green()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)


@commands.cooldown(1, 1, commands.BucketType.member)
@client.command(aliases=["profile"], help="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def me(ctx, *, member: discord.Member=None):
    if member is None:
        member = ctx.author
    server = Server(ctx.guild.id, pre_result={})
    lb = Leaderboard(server.get_participants())
    lb.sort_values()
    _index = lb.tuple_index(member.id)

    if _index is None:
        pos_desc = "???"
        pts = 0
        trs = 0
    else:
        pos_desc = f"#{_index + 1}"
        pts = lb.tuples[_index][1]
        trs = lb.tuples[_index][2]

    del lb
    reply = discord.Embed(
        title=f"üóÇ –ü—Ä–æ—Ñ–∏–ª—å **{member}**",
        description=(
            f"**–û—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞:** {pts} ‚ö°\n\n"
            f"**–ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ:** {pos_desc}\n\n"
            f"**–°—ã–≥—Ä–∞–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤:** {trs} üèÜ\n\n"
            f"**–ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:** `{ctx.prefix}tournament-history 1 {member}`"
        ),
        color=member.color
    )
    reply.set_thumbnail(url=member.avatar_url)
    await ctx.send(embed=reply)


@commands.cooldown(1, 1, commands.BucketType.member)
@client.command(
    aliases=["tournament-history", "th"],
    help="—É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–≤",
    description="–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
    brief="–°—Ç—Ä–∞–Ω–∏—Ü–∞ @–£—á–∞—Å—Ç–Ω–∏–∫",
    usage="1 @User#1234" )
async def tournament_history(ctx, page: int, *, member: discord.Member=None):
    if member is None:
        member = ctx.author
    
    user = Participant(member)
    lb = Leaderboard(user.get_history(as_tuples=True))
    if lb.tuples == []:
        reply = discord.Embed(
            title="üìñ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            description=f"–ü–æ–∫–∞ —á—Ç–æ —É **{member}** –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    elif page < 1 or page > lb.total_pages:
        reply = discord.Embed(
            title="üí¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {lb.total_pages}",
            color=discord.Color.dark_red()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    else:
        tuples, pos = lb.get_page(page)
        total_pages = lb.total_pages
        del lb
        reply = discord.Embed(
            title=f"üèÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ **{member}**",
            color=from_hex("#ffdead")
        )
        for tup in tuples:
            pos += 1
            reply.add_field(name=f"üìÅ **–¢—É—Ä–Ω–∏—Ä {pos}**", value=(
                f"> **–ú–µ—Å—Ç–æ:** {tup[1]} \\üèÖ\n"
                f"> **–†–µ–π—Ç–∏–Ω–≥:** {tup[0]} \\‚ö°"
            ))
        reply.set_footer(text=f"–°—Ç—Ä. {page} / {total_pages}")
        await ctx.send(embed=reply)


@commands.cooldown(1, 3, commands.BucketType.member)
@client.command(help="—Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def top(ctx, page: int=1):
    server = Server(ctx.guild.id, pre_result={})
    lb = Leaderboard(server.get_participants())

    if lb.tuples == []:
        reply = discord.Embed(
            title="üìñ –¢–æ–ø –ø—É—Å—Ç—É–µ—Ç",
            description=f"–ü–æ–∫–∞ —á—Ç–æ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –æ—á–∫–æ–≤"
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    
    elif page > lb.total_pages:
        reply = discord.Embed(
            title="üí¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            description=f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {lb.total_pages}",
            color=discord.Color.dark_red()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)
    
    else:
        lb.sort_values()
        total_pages = lb.total_pages
        tuples, pos = lb.get_page(page)
        del lb
        desc = ""
        curl = channel_url(ctx.channel)
        for i, tup in enumerate(tuples):
            nick = f"[{client.get_user(tup[0])}]({curl})"
            desc += f"`{pos + i + 1}.` {nick} | –†–µ–π—Ç–∏–≥: {tup[1]} \\‚ö°| –¢—É—Ä–Ω–∏—Ä–æ–≤: {tup[2]} \\üèÜ\n"
        
        reply = discord.Embed(
            title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            description=desc,
            color=discord.Color.gold()
        )
        reply.set_footer(text=f"–°—Ç—Ä. {page} / {total_pages}")
        await ctx.send(embed=reply)

#----------------------------------------------+
#                   Errors                     |
#----------------------------------------------+
@client.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        
        def TimeExpand(time):
            if time//60 > 0:
                return str(time//60)+'–º–∏–Ω. '+str(time%60)+' —Å–µ–∫.'
            elif time > 0:
                return str(time)+' —Å–µ–∫.'
            else:
                return f"0.1 —Å–µ–∫."
        
        cool_notify = discord.Embed(
                title='‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ',
                description = f"–û—Å—Ç–∞–ª–æ—Å—å {TimeExpand(int(error.retry_after))}"
            )
        await ctx.send(embed=cool_notify)
    
    elif isinstance(error, commands.MissingPermissions):
        if ctx.author.id not in owner_ids:
            reply = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:\n{display_perms(error.missing_perms)}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        else:
            try:
                await ctx.reinvoke()
            except Exception as e:
                await on_command_error(ctx, e)
    
    elif isinstance(error, commands.MissingRequiredArgument):
        p = ctx.prefix
        cmd = ctx.command
        reply = discord.Embed(
            title=f"üóÉ `{cmd.name}`: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
            description=(
                "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n"
                f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `{p}{cmd.name} {cmd.brief}`\n"
                f"**–ü—Ä–∏–º–µ—Ä:** `{p}{cmd.name} {cmd.usage}`\n\n"
                f"**–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ:** `{p}help {cmd}`"
            ),
            color=discord.Color.dark_red()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

    elif isinstance(error, commands.CheckAnyFailure):
        if ctx.author.id not in owner_ids:
            if has_instance(error.errors, IsNotModerator):
                reply = discord.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description=f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:\n> –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            elif len(error.errors) > 0:
                await on_command_error(ctx, error.errors[0])
            
        else:
            try:
                await ctx.reinvoke()
            except Exception as e:
                await on_command_error(ctx, e)

    elif isinstance(error, commands.BadArgument):
        print(error)
        obj, arg, rest = str(error).split('"', maxsplit=2)
        obj = obj.strip().lower()
        del rest
        ru_msgs = {
            "role": f"–†–æ–ª—å **{arg}** –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
            "member": f"–£—á–∞—Å—Ç–Ω–∏–∫ **{arg}** –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
            "user": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{arg}** –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è —Å –Ω–∏–º –Ω–µ—Ç –æ–±—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.",
            "channel": f"–ö–∞–Ω–∞–ª **{arg}** –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
            "int": f"–ê—Ä–≥—É–º–µ–Ω—Ç **{arg}** –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä `5`."
        }
        desc = ru_msgs.get(obj, "–ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.")
        
        reply = discord.Embed(
            title=f"üìç | –ß—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
            description=desc,
            color=discord.Color.dark_red()
        )
        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
        await ctx.send(embed=reply)

    elif isinstance(error, commands.CommandNotFound):
        pass

    else:
        raise error

#----------------------------------------------+
#                  Loading Cogs                |
#----------------------------------------------+
for file_name in os.listdir("./cogs"):
    if file_name.endswith(".py"):
        client.load_extension(f"cogs.{file_name[:-3]}")

# Running
client.run(bot_token)