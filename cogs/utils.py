import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio
from random import randint

#----------------------------------------------+
#                 Functions                    |
#----------------------------------------------+
from functions import has_permissions, antiformat, get_message


def unwrap_isolation(text, s):
    length, wid, i = len(text), len(s), 0
    out = ""
    while i < length:
        if text[i:i + wid] == s:
            i += wid
            while i < length and text[i:i + wid] != s:
                out += text[i]
                i += 1
            out += "\n"
        i += 1
    return out.strip()


def color_from_string(_color):
    Col = discord.Color
    _color = _color.lower()
    if "," in _color:
        rgb = [c.strip() for c in _color.split(",")]
        rgb = [int(c) for c in rgb]
        if len(rgb) < 3 or len(rgb) > 3:
            _color = Col.default()
        else:
            in_range_bools = [(c >= 0 and c < 256) for c in rgb]
            if False in in_range_bools:
                _color = Col.default()
            else:
                _color = Col.from_rgb(*rgb)
    else:
        colors = {
            "green": Col.green(), "dark_green": Col.dark_green(),
            "red": Col.red(), "dark_red": Col.dark_red(),
            "blue": Col.default(), "dark_blue": Col.dark_blue(),
            "magenta": Col.magenta(), "teal": Col.teal(),
            "gold": Col.gold(), "orange": Col.orange(),
            "purple": Col.purple(), "blurple": Col.blurple(),
            "white": Col.from_rgb(255, 255, 255), "black": Col.from_rgb(1, 1, 1)
        }
        if _color not in colors:
            _color = Col.default()
        else:
            _color = colors[_color]
    return _color


def from_hex(string):
    return int(string[1:], 16)


def embed_from_string(text_input):
    # Carving logical parts
    _title = unwrap_isolation(text_input, "==")
    _desc = unwrap_isolation(text_input, "--")
    _color = unwrap_isolation(text_input, "##")
    _image_url = unwrap_isolation(text_input, "&&")
    _thumb_url = unwrap_isolation(text_input, "++")
    # Interpreting some values
    if _title == "" and _desc == "" and _color == "" and _image_url == "" and _thumb_url == "":
        return None
    else:
        _color = color_from_string(_color)

        emb = discord.Embed(
            title=_title,
            description=_desc,
            color=_color
        )
        if _image_url != "":
            emb.set_image(url=_image_url)
        if _thumb_url != "":
            emb.set_thumbnail(url=_thumb_url)
        
        return emb


def is_int(string):
    try:
        int(string)
        return True
    except ValueError:
        return False


class utils(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------------------------+
    #                   Events                     |
    #----------------------------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(f">> Utils cog is loaded")

    #----------------------------------------------+
    #                  Commands                    |
    #----------------------------------------------+
    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        aliases=["rand"],
        help="–≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
        brief="–ì–∞–Ω–∏—Ü–∞",
        usage="-30 100"
    )
    async def random(self, ctx, *, string):
        nums = string.split()[:2]
        all_ints = True
        for i, num in enumerate(nums):
            if is_int(num):
                nums[i] = int(num)
            else:
                all_ints = False
                break
        if not all_ints:
            p, cmd = ctx.prefix, ctx.command.name
            reply = discord.Embed(
                title="üí• –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç",
                description=f"–ü–æ—Å–ª–µ `{p}{cmd}` –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        else:
            if len(nums) > 1:
                l_num, r_num = nums
            else:
                l_num, r_num = 0, nums[0]
            l_num, r_num = min(l_num, r_num), max(l_num, r_num)
            
            if r_num - l_num > 1E12:
                reply = discord.Embed(
                    title="üí• –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç",
                    description=f"–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å `10 ^ 12`",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)

            else:
                result = randint(l_num, r_num)
                reply = discord.Embed(
                    title=f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É `{l_num}` –∏ `{r_num}`",
                    description=f"**{result}**",
                    color=from_hex("#ffdead")
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                
                await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        help=(
            "—Å–æ–∑–¥–∞—ë—Ç —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ç–µ–∫—Å—Ç–æ–º, –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ç.–ø.\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–º–∫–∏:\n"
            "> `==–ó–∞–≥–æ–ª–æ–≤–æ–∫==` - –∑–∞–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫\n"
            "> `--–¢–µ–∫—Å—Ç--` - –∑–∞–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫\n"
            "> `##—Ü–≤–µ—Ç##` - –∑–∞–¥–∞—ë—Ç —Ü–≤–µ—Ç (—Å–º. –Ω–∏–∂–µ)\n"
            "> `&&url_–∫–∞—Ä—Ç–∏–Ω–∫–∏&&` - –∑–∞–¥–∞—ë—Ç –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "> `++url_–∫–∞—Ä—Ç–∏–Ω–∫–∏++` - –∑–∞–¥–∞—ë—Ç –º–∞–ª–µ–Ω—å–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "**–û —Ü–≤–µ—Ç–µ:** —Ü–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ RGB\n"
            "–í RGB —Ñ–æ—Ä–º–∞—Ç–µ –º–µ–∂–¥—É `##` –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä `##23, 123, 123##`\n"
            "–°–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤: `red, dark_red, blue, dark_blue, green, dark_green, gold, teal, magenta, purple, blurple, orange, white, black`"
        ),
        brief="–°–∏–Ω—Ç–∞–∫—Å–∏—Å",
        usage=(
            "==–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ==\n"
            "--–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å **–ü–æ–º–æ—â–Ω–∏–∫**!--\n"
            "##gold##"
        )
    )
    async def embed(self, ctx, *, text):
        p = ctx.prefix
        if not has_permissions(ctx.author, ["administrator"]):
            reply = discord.Embed(
                title="üí¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description = (
                    "–¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∞–≤–∞:\n"
                    "> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
            await ctx.send(embed=reply)
        
        else:
            emb = embed_from_string(text)
            if emb is None:
                pass
            else:
                await ctx.send(embed=emb)
                await ctx.message.delete()
                try:
                    await ctx.send(f"{p}embed {antiformat(text)}")
                except Exception:
                    pass
    

    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        help="—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –º–æ–∏ —Ä–∞–º–∫–∏ (—ç–º–±–µ–¥—ã)",
        brief="ID_—Å–æ–æ–±—â–µ–Ω–∏—è –¢–µ–∫—Å—Ç_–¥–ª—è_—ç–º–±–µ–¥–∞",
        usage="123456789123123123 ==–ó–∞–≥–æ–ª–æ–≤–æ–∫== --–¢–µ–∫—Å—Ç--"
    )
    async def edit(self, ctx, _id, *, text_input):
        if not has_permissions(ctx.author, ["administrator"]):
            reply = discord.Embed(
                title="üí¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description = (
                    "–¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∞–≤–∞:\n"
                    "> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                ),
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
            await ctx.send(embed=reply)
        
        elif not _id.isdigit():
            reply = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"ID –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.\n–í–≤–µ–¥–µ–Ω–æ: {_id}",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
            await ctx.send(embed=reply)
        
        else:
            message = await get_message(ctx.channel, int(_id))
            if message is None:
                reply = discord.Embed(
                    title="üîé –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description=f"–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID: `{_id}`"
                )
                reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                await ctx.send(embed=reply)
            
            elif message.author.id != self.client.user.id:
                reply = discord.Embed(
                    title="‚ùå –≠—Ç–æ –Ω–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    description="–Ø –Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=str(ctx.author.avatar_url))
                await ctx.send(embed=reply)
            
            else:
                emb = embed_from_string(text_input)
                
                await message.edit(embed=emb)
                try:
                    await ctx.author.send(f"{ctx.prefix}edit {_id} {antiformat(text_input)}")
                except Exception:
                    pass
                await ctx.message.delete()
    
    #----------------------------------------------+
    #                   Errors                     |
    #----------------------------------------------+


def setup(client):
    client.add_cog(utils(client))