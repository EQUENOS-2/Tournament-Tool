import discord
from discord.ext import commands
from discord.ext.commands import Bot
import asyncio
from pymongo import MongoClient
import os, random


db_token = str(os.environ.get("db_token"))
cluster = MongoClient(db_token)
db = cluster["tournament_tool_db"]
#----------------------------------------------+
#                 Functions                    |
#----------------------------------------------+
from functions import VoiceButton, VConfig, TemporaryVoices, antiformat as anf


class voices(commands.Cog):
    def __init__(self, client):
        self.client = client

    #----------------------------------------------+
    #                   Events                     |
    #----------------------------------------------+
    @commands.Cog.listener()
    async def on_ready(self):
        print(f">> Voices cog is loaded")


    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        was_in = before.channel
        now_in = after.channel
        if was_in is not None or now_in is not None:
            vconf = VConfig(member.guild.id)
            check1 = lambda vc: len(vc.members) < vc.user_limit and vconf.which_creates(vc.user_limit, vc.name) is not None
            check2 = lambda vc: vc.id in vconf.waiting_room_ids and len(vc.members) > 0
            # If left a voice channel
            if was_in is not None:
                if vconf.which_creates(was_in.user_limit, was_in.name) is not None:
                    # Deletes empty private room
                    if len(was_in.members) < 1:
                        try:
                            await was_in.delete()
                        except:
                            pass
                    # Checks waiting rooms
                    else:
                        category = was_in.category
                        if category is None:
                            category = member.guild
                        waiting_rooms = [vc for vc in category.voice_channels if check2(vc)]
                        if waiting_rooms != []:
                            # Moves someone to a private room
                            wr = waiting_rooms[0]
                            del waiting_rooms
                            if len(wr.members) > 0:
                                try:
                                    await wr.members[0].move_to(was_in)
                                except:
                                    pass
                # If left a custom room
                elif len(was_in.members) < 1:
                    temprooms = TemporaryVoices(member.guild.id)
                    owner_id = temprooms.get_owner(was_in.id)
                    if owner_id is not None:
                        try:
                            temprooms.remove_custom(owner_id, was_in.id)
                            await was_in.delete()
                        except:
                            pass
                    del temprooms

            # If joined a voice channel
            if now_in is not None:
                # Pressed a button
                button = vconf.get(now_in.id)
                if button is not None:
                    category = now_in.category
                    if category is None:
                        category = member.guild
                    try:
                        ovw = {member: discord.PermissionOverwrite(move_members=True)}
                        room = await category.create_voice_channel(name=button.name, user_limit=button.limit, overwrites=ovw)
                        await member.move_to(room)
                        # Also checking the queue and moving people
                        waiting_rooms = [vc for vc in category.voice_channels if check2(vc)]
                        broke = False
                        for wr in waiting_rooms:
                            if not broke:
                                for waiter in wr.members:
                                    if len(room.members) >= room.user_limit:
                                        broke = True
                                        break
                                    else:
                                        await waiter.move_to(room)
                            else:
                                break
                        del waiting_rooms
                    except:
                        pass
                # Entered a waiting room
                elif now_in.id in vconf.waiting_room_ids:
                    category = now_in.category
                    if category is None:
                        category = member.guild
                    available_vcs = [vc for vc in category.voice_channels if check1(vc)]
                    if len(available_vcs) > 0:
                        room = random.choice(available_vcs)
                        if len(room.members) < room.user_limit:
                            try:
                                await member.move_to(room)
                            except:
                                pass
                    
            del vconf


    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        if isinstance(channel, discord.VoiceChannel):
            vconf = VConfig(channel.guild.id)
            vconf.remove_button(channel.id)
            vconf.remove_waiting_room(channel.id)

            tv = TemporaryVoices(channel.guild.id)
            owner = tv.get_owner(channel.id)
            if owner is not None:
                tv.remove_custom(owner, channel.id)

    #----------------------------------------------+
    #                  Commands                    |
    #----------------------------------------------+
    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.command(
        help="—Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–≤–∞—Ç",
        description="—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ª—é–¥–µ–π. –£ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∏–∫ –∏–∑ –≤–æ–π—Å–∞ –∏ –µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.",
        usage="–õ–∏–º–∏—Ç-–ª—é–¥–µ–π –ù–∞–∑–≤–∞–Ω–∏–µ",
        brief="4 –ö–æ–º–Ω–∞—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤" )
    async def create(self, ctx, limit: int, *, name=None):
        isadm = ctx.author.guild_permissions.administrator
        channels = VConfig(ctx.guild.id).room_creation_channel_ids

        if ctx.channel.id not in channels and not isadm:
            pass
        else:
            if not (0 < limit < 100):
                reply = discord.Embed(
                    title="‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç",
                    description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç `1` –¥–æ `99`",
                    color=discord.Color.dark_red()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)
            
            else:
                temporooms = TemporaryVoices(ctx.guild.id, {f"custom_rooms.{ctx.author.id}": True})
                his_rooms = temporooms.custom_rooms.get(ctx.author.id, [])
                for i, room in enumerate(his_rooms):
                    if ctx.guild.get_channel(room) is None:
                        temporooms.remove_custom(ctx.author.id, room)
                        his_rooms.pop(i)
                        break
                
                if len(his_rooms) > 0 and not isadm:
                    reply = discord.Embed(
                        title="‚ùå | –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç",
                        description="–í—ã –º–æ–∂–µ—Ç–µ –≤–ª–∞–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π.",
                        color=discord.Color.dark_red()
                    )
                    reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                    await ctx.send(embed=reply)
                
                else:
                    if name is None:
                        name = f"–ü—Ä–∏–≤–∞—Ç {ctx.author}"
                    vc = None
                    try:
                        category = ctx.channel.category
                        if category is None:
                            category = ctx.guild
                        ovw = {ctx.author: discord.PermissionOverwrite(move_members=True, manage_channels=True)}
                        vc = await category.create_voice_channel(name=name, user_limit=limit, overwrites=ovw)
                    except:
                        await ctx.send("üí• –ü–æ—Ö–æ–∂–µ, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
                    if vc is not None:
                        temporooms.add_custom(ctx.author.id, vc.id)

                        reply = discord.Embed(
                            title="üîí | –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞",
                            description=(
                                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {anf(vc.name)}\n"
                                f"**–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {limit}\n"
                                f"–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤–æ–π—Å–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞."
                            ),
                            color=discord.Color.dark_green()
                        )
                        reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                        await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["voice-button", "vb", "voicebutton"],
        help="–∫–æ–Ω–≤–µ–π–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
        description="—Å–æ–∑–¥–∞—ë—Ç –∫–∞–Ω–∞–ª-–∫–Ω–æ–ø–∫—É, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.",
        usage="–õ–∏–º–∏—Ç-–ª—é–¥–µ–π –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–æ–≤",
        brief="4 –ö–æ–º–Ω–∞—Ç–∞ –Ω–∞ —á–µ—Ç–≤–µ—Ä—ã—Ö" )
    async def voice_button(self, ctx, limit: int, *, name):
        if not (0 < limit < 100):
            reply = discord.Embed(
                title="‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç",
                description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç `1` –¥–æ `99`",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            vc = None
            try:
                vc = await ctx.guild.create_voice_channel(f"[‚ûï] –°–æ–∑–¥–∞—Ç—å {name}")
            except:
                await ctx.send("üí• –ü–æ—Ö–æ–∂–µ, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
            if vc is not None:
                vconf = VConfig(ctx.guild.id, {"buttons": False})
                vconf.add_button(vc.id, limit, name)

                reply = discord.Embed(
                    title="\\‚ûï | –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª-–∫–Ω–æ–ø–∫–∞",
                    description=(
                        f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—è–≤–∏–ª—Å—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª {anf(vc.name)}, –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ—Ç–æ—Ä—ã–π —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å "
                        f"–ø—Ä–∏–≤–∞—Ç—ã –¥–ª—è `{limit}` —á–µ–ª–æ–≤–µ–∫, –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {anf(name)}."
                    ),
                    color=discord.Color.dark_green()
                )
                reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
                await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["voice-buttons", "vbs", "voicebuttons"],
        help="–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–∞–ª—ã-–∫–Ω–æ–ø–∫–∏",
        description="–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤-–∫–Ω–æ–ø–æ–∫",
        usage="",
        brief="" )
    async def voice_buttons(self, ctx):
        vconf = VConfig(ctx.guild.id, {"buttons": True})
        reply = discord.Embed(
            title="üîä | –ö–∞–Ω–∞–ª—ã-–∫–Ω–æ–ø–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            description="–ö–∞–Ω–∞–ª—ã-–∫–Ω–æ–ø–∫–∏ - —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –≤–æ–π—Å.",
            color=discord.Color.magenta()
        )
        for button in vconf.buttons:
            name = ctx.guild.get_channel(button.id).name
            try:
                reply.add_field(name=name, value=f"> –°–æ–∑–¥–∞—ë—Ç –∫–∞–Ω–∞–ª **{anf(button.name)}** –Ω–∞ **{button.limit}** —á–µ–ª–æ–≤–µ–∫", inline=False)
            except:
                pass
        if len(reply.fields) < 1:
            reply.description += "\n\n–ö–∞–Ω–∞–ª–æ–≤-–∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç."
        await ctx.send(embed=reply)
    

    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        name="waiting-rooms",
        aliases=["waiting_rooms", "wrs"],
        help="–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è",
        description="–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –æ–∂–∏–¥–∞–Ω–∏—è",
        usage="",
        brief="" )
    async def waitingrooms(self, ctx):
        vconf = VConfig(ctx.guild.id, {"waiting_room_ids": True})
        reply = discord.Embed(
            title="üîé | –ö–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è",
            description="–ö–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è - —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç.",
            color=discord.Color.magenta()
        )
        for wrid in vconf.waiting_room_ids:
            wr = ctx.guild.get_channel(wrid)
            try:
                reply.add_field(name=wr.name, value=f"> –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –ª—é–±–æ–π –ø—Ä–∏–≤–∞—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{anf(wr.category)}**", inline=False)
            except:
                pass
        if len(reply.fields) < 1:
            reply.description += "\n\n–ö–æ–º–Ω–∞—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç."
        await ctx.send(embed=reply)
    

    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["add-waiting-room", "awr", "addwaitingroom"],
        help="–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è",
        description="—Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥—É—Ç —Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ –ø—Ä–∏–≤–∞—Ç–∞–º.",
        usage="",
        brief="" )
    async def add_waiting_room(self, ctx):
        vc = None
        try:
            ovw = {ctx.guild.default_role: discord.PermissionOverwrite(speak=False)}
            vc = await ctx.guild.create_voice_channel(f"üîé –ù–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É", overwrites=ovw)
        except:
            await ctx.send("üí• –ü–æ—Ö–æ–∂–µ, —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        if vc is not None:
            vconf = VConfig(ctx.guild.id, {"_id": True})
            vconf.add_waiting_room(vc.id)

            reply = discord.Embed(
                title="üîé | –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è",
                description=(
                    f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—è–≤–∏–ª—Å—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª {anf(vc.name)}, –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ—Ç–æ—Ä—ã–π —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç "
                    f"—Å–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º."
                ),
                color=discord.Color.dark_green()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)


    @commands.cooldown(1, 1, commands.BucketType.member)
    @commands.has_permissions(administrator=True)
    @commands.command(
        aliases=["allow-room-creation", "arc", "room-creation"],
        help="—É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥",
        description="–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥.",
        usage="#–∫–∞–Ω–∞–ª-1 #–∫–∞–Ω–∞–ª-2 ...",
        brief="#—Å–æ–∑–¥–∞–Ω–∏–µ-–ø—Ä–∏–≤–∞—Ç–æ–≤" )
    async def allow_room_creation(self, ctx, *, raw_channels):
        channels = []
        listed_trash = ""
        listed_channels = ""
        for raw in raw_channels.split()[:30]:
            try:
                channel = await commands.TextChannelConverter().convert(ctx, raw)
                channels.append(channel.id)
                listed_channels += f"> <#{channel.id}>\n"
            except:
                listed_trash += f"> {raw}\n"
        if len(channels) < 1:
            reply = discord.Embed(
                title="‚ùå | –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã",
                description=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–≥–Ω—É—Ç—å –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞–ø–∏—Ä–º–µ—Ä <#{ctx.channel.id}>",
                color=discord.Color.dark_red()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)
        
        else:
            VConfig(ctx.guild.id, {"_id": True}).set_room_creation_channels(channels)

            if listed_trash != "":
                listed_channels += f"\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–∞–∫ –∫–∞–Ω–∞–ª—ã:\n{listed_trash}"
            reply = discord.Embed(
                title="üéß | –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                description=f"–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:\n{listed_channels}",
                color=discord.Color.dark_green()
            )
            reply.set_footer(text=str(ctx.author), icon_url=ctx.author.avatar_url)
            await ctx.send(embed=reply)


    #----------------------------------------------+
    #                   Errors                     |
    #----------------------------------------------+


def setup(client):
    client.add_cog(voices(client))